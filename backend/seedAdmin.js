require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('./models/User'); // import model User ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

async function createAdmin() {
  try {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });

    console.log('‚úÖ Connected to MongoDB');

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ admin ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existingAdmin = await User.findOne({ role: 'admin' });
    if (existingAdmin) {
      console.log('‚ö†Ô∏è Admin already exists:', existingAdmin.username);
      process.exit(0);
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
    const username = 'admin';
    const password = 'admin123'; // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÉ‡∏ô production
    const name = 'System Administrator';

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á admin
    const admin = new User({
      username,
      password: hashedPassword,
      role: 'admin',
      name
    });

    await admin.save();
    console.log('üéâ Admin created successfully');
    console.log('üëâ Username:', username);
    console.log('üëâ Password:', password);

    process.exit(0);
  } catch (err) {
    console.error('‚ùå Error creating admin:', err.message);
    process.exit(1);
  }
}

createAdmin();
